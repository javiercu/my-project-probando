#summary One-sentence summary of this page.
#sidebar TableContents



=_Modelling process_=

Modeling can be described as graphically representing a  software system. The resulting model can be used to emphasize a certain aspect of the system being represented, and to record, document and communicate its detail. A study of such a model can enable insight or understanding of the planning system.  *itSIMPLE4.0*'s modeling platform is based on the _Unified Modeling Language_ (*UML*), a standard that defines rules and notations for specifying business and software systems. 

*itSIMPLE4.0* proposes a special use of *UML* in a planning approach (named *UML.P*) which we believe can contribute to the knowledge acquisition process (from different viewpoints) as well as to the domain model visualization and verification.

The environment was designed to incorporate a toolset (representation languages and theories) capable of dealing with requirements and knowledge engineering.

Some of the *UML diagrams* can be directly applied for planning domains such as _use case diagram_, _class diagram_, and _state chart diagram_ for each project (see in left panel Manage project *Newproject1* diagrams).

https://my-project-probando.googlecode.com/svn/modeling1.png


==_Use Case Diagram_ ==

A _Use Case diagram_ of _itSIMPLE4.0_ project, captures _Use Cases_ and relationships among _Actors_ and the _system_. It describes the functional requirements of the system, the manner in which outside things (_Actors_) interact at the system boundary, and the response of the system.
Exemplo:

https://my-project-probando.googlecode.com/svn/cuexample.png

===_Toolbox Elements and Connectors_===

Select _Use Case diagram elements_ and _connectors_ of the _Use Case Diagram Tab_ (2:). You most before select _Use Case Diagram- choice in left panel _Manage projects_ for the this project (1:): 

https://my-project-probando.googlecode.com/svn/cuexample3.png

 * An _Actor_ (https://my-project-probando.googlecode.com/svn/actor.png)is a user of the _system_; user can mean a human user, a machine, or even another system or subsystem in the model. Anything that interacts with the system from the outside or system boundary is termed an _Actor_. Actors are typically associated with _Use Cases_.
 * A _Use Case_ (https://my-project-probando.googlecode.com/svn/useCase1.png) is a _UML_ modeling element that describes how a user of the proposed system interacts with the system to perform a discrete unit of work. It describes and signifies a single interaction over time that has meaning for the end user (person, machine or other system), and is required to leave the system in a complete state: the interaction either completed or rolled back to the initial state.
 * _Association_ (https://my-project-probando.googlecode.com/svn/association.png) refers to how individual use cases can be linked together based upon certain functionality.
 * In _UML_ modeling, a _dependency (https://my-project-probando.googlecode.com/svn/dependency1.png) relationship_ is a relationship in which changes to one model element (the supplier) impact another model element (the client).


According to the problem context, you can personalize actors, selecting differents icons in the property object panel: 

https://my-project-probando.googlecode.com/svn/ator1.png

=== Icons === 
It is always useful to choose some [Icons icon] to the actor, because this gives a better interpretation to your _Use Case Diagram_.


==_Class diagram_==


The _Class diagram_ of _itSIMPLE4.0_ captures the logical structure of the system; the _Classes_ and things that make up the model. It is a static model,  escribing what exists and what _attributes_ and _behavior_ it has, rather than how something is done. _Generalizations_  and _Associations_ are all valuable in reflecting inheritance, composition or usage, and connections, respectively.

https://my-project-probando.googlecode.com/svn/dclasse1.png

===_Toolbox Elements_===

SCREEN OF TOOLBOX ELEMENTS OF CLASS DIAGRAM

==== Class ==== 

A _Class_ (https://my-project-probando.googlecode.com/svn/Class.png) is a representation of objects that reflects their structure and behavior within the system. It is a template from which actual running instances are created. 
A _Class_ can have attributes (data) and methods (operations or behavior) and classes can inherit characteristics from parent Classes and delegate behavior to other Classes. 
Class models usually describe the logical structure of the system and are the building blocks from which components are built. 

 * According _OMG UML Specification_: the main purpose of a _class_ is to specify a classification of objects and to specify the features that characterize the structure and behavior of those objects. _Objects_ of a _class_ must contain values for each attribute that is a member of that _class_, in accordance with the characteristics of the _attribute_, for example its type and multiplicity. 
When an object is instantiated in a _class_, for every _attribute_ of the class that has a specified default, if an initial value of the attribute is not specified explicitly for the instantiation, then the default value specification is evaluated to set the initial value of the attribute for the object.

==== Enumeration ==== 

An _Enumeration_ (https://my-project-probando.googlecode.com/svn/Class.png) is a data type, whose instances can be any of a number of user-defined enumeration literals. It is possible to extend the set of applicable enumeration literals in other packages or profiles. 

 * According _OMG UML Specification_: an enumeration is a data type whose values are enumerated in the model as enumeration literals.

==== Class Association ==== 

An _Association_ (https://my-project-probando.googlecode.com/svn/association.png) implies two model elements have a _relationship_, usually implemented as an instance variable in one _Class_. The connector can include _named roles_ at each end, _multiplicity_, _direction_ and _constraints_. _Association_ is the general main relationship type between elements. 
To connect more than two elements in an association, you can use the _N-Ary_ Association element. 

 * According _OMG UML Specification_: an _association_ specifies a semantic relationship that can occur between typed instances. It has at least two ends represented by properties, each of which is connected to the type of the end. More than one end of the association may have the same type. An end property of an association that is owned by an end class or that is a navigable owned end of the association indicates that the association is navigable from the opposite ends; otherwise, the association is not navigable from the opposite ends.

==== Generalization ====

A _Generalization_ (https://my-project-probando.googlecode.com/svn/generalization.png) is used to indicate inheritance between classes. Drawn from the specific classifier to a general classifier, the
generalize implication is that the source inherits the target's characteristics.

 * According _OMG UML Specification_: a _generalization_ is a taxonomic relationship between a more general classifier and a more specific classifier. Each instance of the specific classifier is also an indirect instance of the general classifier. Thus, the specific classifier inherits the features of the more general classifier.









 

==_State machine diagram_==



===_Toolbox Elements and connectors_===